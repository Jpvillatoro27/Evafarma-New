"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(auth)/ventas/page",{

/***/ "(app-pages-browser)/./lib/services.ts":
/*!*************************!*\
  !*** ./lib/services.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clientesService: () => (/* binding */ clientesService),\n/* harmony export */   cobrosService: () => (/* binding */ cobrosService),\n/* harmony export */   recibosService: () => (/* binding */ recibosService),\n/* harmony export */   usuariosService: () => (/* binding */ usuariosService),\n/* harmony export */   ventasService: () => (/* binding */ ventasService)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./lib/supabase.ts\");\n/* __next_internal_client_entry_do_not_use__ clientesService,cobrosService,recibosService,ventasService,usuariosService auto */ \n// Servicios de Clientes\nconst clientesService = {\n    async getClientes () {\n        try {\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('clientes').select('*').order('nombre');\n            if (error) throw error;\n            return data || [];\n        } catch (error) {\n            console.error('Error al obtener clientes:', error);\n            throw error;\n        }\n    },\n    async createCliente (cliente) {\n        try {\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('clientes').insert([\n                cliente\n            ]).select().single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error('Error al crear cliente:', error);\n            throw error;\n        }\n    },\n    async updateCliente (id, cliente) {\n        try {\n            console.log('Actualizando cliente:', {\n                id,\n                ...cliente\n            });\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('clientes').update(cliente).eq('id', id).select().single();\n            if (error) {\n                console.error('Error en la actualización:', error);\n                throw error;\n            }\n            console.log('Cliente actualizado:', data);\n            return data;\n        } catch (error) {\n            console.error('Error al actualizar cliente:', error);\n            throw error;\n        }\n    },\n    async deleteCliente (id) {\n        try {\n            console.log('Eliminando cliente:', id);\n            const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('clientes').delete().eq('id', id);\n            if (error) {\n                console.error('Error en la eliminación:', error);\n                throw error;\n            }\n            console.log('Cliente eliminado');\n        } catch (error) {\n            console.error('Error al eliminar cliente:', error);\n            throw error;\n        }\n    }\n};\n// Servicios de Cobros\nconst cobrosService = {\n    async getCobros () {\n        try {\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('cobros').select(\"\\n          *,\\n          clientes:cliente_id (\\n            id,\\n            codigo,\\n            nombre,\\n            direccion,\\n            telefono,\\n            nit,\\n            propietario,\\n            saldo_pendiente\\n          )\\n        \").order('fecha', {\n                ascending: false\n            });\n            if (error) throw error;\n            return data || [];\n        } catch (error) {\n            console.error('Error al obtener cobros:', error);\n            throw error;\n        }\n    },\n    async createCobro (cobroData) {\n        try {\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('cobros').insert([\n                cobroData\n            ]).select().single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error('Error al crear cobro:', error);\n            throw error;\n        }\n    },\n    async updateCobro (id, cobroData) {\n        try {\n            console.log('Actualizando cobro:', {\n                id,\n                ...cobroData\n            });\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('cobros').update(cobroData).eq('id', id).select(\"\\n          id,\\n          numero,\\n          fecha,\\n          cod_farmacia,\\n          cliente_id,\\n          descripcion,\\n          total,\\n          visitador,\\n          fecha_cheque,\\n          banco,\\n          numero_cheque,\\n          valor_cheque,\\n          otros,\\n          otros2,\\n          otros3,\\n          created_at,\\n          clientes (\\n            id,\\n            codigo,\\n            nombre,\\n            direccion,\\n            telefono,\\n            nit,\\n            visitador,\\n            propietario,\\n            saldo_pendiente\\n          )\\n        \").single();\n            if (error) {\n                console.error('Error al actualizar cobro:', error);\n                throw new Error(error.message);\n            }\n            console.log('Cobro actualizado:', data);\n            return data;\n        } catch (error) {\n            console.error('Error al actualizar cobro:', error);\n            throw error;\n        }\n    },\n    async deleteCobro (id) {\n        try {\n            console.log('Eliminando cobro:', id);\n            const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('cobros').delete().eq('id', id);\n            if (error) {\n                console.error('Error al eliminar cobro:', error);\n                throw new Error(error.message);\n            }\n            console.log('Cobro eliminado correctamente');\n            return true;\n        } catch (error) {\n            console.error('Error al eliminar cobro:', error);\n            throw error;\n        }\n    }\n};\n// Servicios de Recibos\nconst recibosService = {\n    async getRecibos () {\n        try {\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('recibos').select(\"\\n          *,\\n          clientes:cliente_id (\\n            id,\\n            codigo,\\n            nombre,\\n            direccion,\\n            telefono,\\n            nit,\\n            propietario,\\n            saldo_pendiente\\n          )\\n        \").order('fecha', {\n                ascending: false\n            });\n            if (error) throw error;\n            return data || [];\n        } catch (error) {\n            console.error('Error al obtener recibos:', error);\n            throw error;\n        }\n    },\n    async createRecibo (reciboData) {\n        try {\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('recibos').insert([\n                reciboData\n            ]).select().single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error('Error al crear recibo:', error);\n            throw error;\n        }\n    }\n};\n// Servicios de Ventas\nconst ventasService = {\n    async getVentas () {\n        try {\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('ventas_mensuales').select(\"\\n          *,\\n          clientes:cliente_id (\\n            id,\\n            codigo,\\n            nombre,\\n            direccion,\\n            telefono,\\n            nit,\\n            propietario,\\n            saldo_pendiente\\n          ),\\n          productos:id (\\n            id,\\n            nombre,\\n            cantidad,\\n            precio_unitario,\\n            total\\n          )\\n        \").order('fecha', {\n                ascending: false\n            });\n            if (error) throw error;\n            return data || [];\n        } catch (error) {\n            console.error('Error al obtener ventas:', error);\n            throw error;\n        }\n    },\n    async createVenta (ventaData) {\n        try {\n            // 1. Crear la venta\n            const { data: venta, error: ventaError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('ventas_mensuales').insert([\n                {\n                    fecha: ventaData.fecha,\n                    cliente_id: ventaData.cliente_id,\n                    visitador: ventaData.visitador,\n                    total: ventaData.total\n                }\n            ]).select().single();\n            if (ventaError) throw ventaError;\n            // 2. Crear los productos de la venta\n            const productosData = ventaData.productos.map((producto)=>({\n                    ...producto,\n                    venta_id: venta.id\n                }));\n            const { error: productosError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('productos_venta').insert(productosData);\n            if (productosError) throw productosError;\n            // 3. Actualizar el saldo pendiente del cliente\n            const { data: cliente, error: clienteSelectError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('clientes').select('saldo_pendiente').eq('id', ventaData.cliente_id).single();\n            if (clienteSelectError) throw clienteSelectError;\n            const nuevoSaldo = (cliente.saldo_pendiente || 0) + ventaData.total;\n            const { error: clienteUpdateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('clientes').update({\n                saldo_pendiente: nuevoSaldo\n            }).eq('id', ventaData.cliente_id);\n            if (clienteUpdateError) throw clienteUpdateError;\n            return {\n                ...venta,\n                clientes: {\n                    ...venta.clientes,\n                    saldo_pendiente: nuevoSaldo\n                }\n            };\n        } catch (error) {\n            console.error('Error al crear venta:', error);\n            throw error;\n        }\n    },\n    async updateVenta (id, venta) {\n        try {\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('ventas').update(venta).eq('id', id).select(\"\\n          *,\\n          clientes (\\n            id,\\n            nombre,\\n            direccion,\\n            telefono,\\n            email\\n          )\\n        \").single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error('Error al actualizar venta:', error);\n            throw error;\n        }\n    },\n    async deleteVenta (id) {\n        try {\n            const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('ventas').delete().eq('id', id);\n            if (error) throw error;\n        } catch (error) {\n            console.error('Error al eliminar venta:', error);\n            throw error;\n        }\n    }\n};\n// Servicios de Usuarios (Cliente)\nconst usuariosService = {\n    async register (email, password, nombre) {\n        try {\n            // 1. Registrar en auth.users\n            const { data: authData, error: authError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.signUp({\n                email,\n                password,\n                options: {\n                    data: {\n                        nombre,\n                        role: 'visitador'\n                    }\n                }\n            });\n            if (authError) {\n                console.error('Error en auth.signUp:', authError);\n                throw new Error('Error al crear la cuenta de usuario');\n            }\n            if (!(authData === null || authData === void 0 ? void 0 : authData.user)) {\n                throw new Error('No se pudo crear el usuario');\n            }\n            // 2. Crear en la tabla usuarios\n            try {\n                const { error: dbError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('usuarios').insert({\n                    id: authData.user.id,\n                    email: email,\n                    nombre: nombre,\n                    rol: 'visitador',\n                    created_at: new Date().toISOString()\n                });\n                if (dbError) {\n                    console.error('Error al crear usuario en la base de datos:', dbError);\n                    // Verificar si el error es de recursión de políticas\n                    if (dbError.message.includes('infinite recursion')) {\n                        // Si el error es de recursión pero el usuario se creó, continuamos\n                        console.log('Usuario creado a pesar del error de recursión');\n                        return authData;\n                    }\n                    // Para otros tipos de errores, cerramos sesión\n                    await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.signOut();\n                    throw new Error(\"Error al crear el usuario en la base de datos: \".concat(dbError.message));\n                }\n                return authData;\n            } catch (dbError) {\n                // Verificar si el usuario realmente se creó a pesar del error\n                const { data: checkUser } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('usuarios').select('*').eq('id', authData.user.id).single();\n                if (checkUser) {\n                    console.log('Usuario encontrado después del error:', checkUser);\n                    return authData;\n                }\n                // Si no se encontró el usuario, cerramos sesión y lanzamos el error\n                await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.signOut();\n                throw dbError;\n            }\n        } catch (error) {\n            console.error('Error en el registro:', error);\n            throw error;\n        }\n    },\n    async login (email, password) {\n        try {\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.signInWithPassword({\n                email,\n                password\n            });\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error('Error en el login:', error);\n            if (error instanceof Error && error.message.includes('Invalid login credentials')) {\n                throw new Error('Credenciales inválidas. Por favor, verifica tu email y contraseña.');\n            }\n            throw error;\n        }\n    },\n    async getUsuarioActual () {\n        try {\n            const { data: { user }, error: authError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n            if (authError) {\n                console.error('Error al obtener usuario de auth:', authError);\n                throw authError;\n            }\n            if (!user) {\n                throw new Error('No hay usuario autenticado');\n            }\n            // Obtener información adicional del usuario desde la tabla usuarios\n            const { data: usuarioData, error: usuarioError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('usuarios').select('*').eq('id', user.id).single();\n            if (usuarioError) {\n                console.error('Error al obtener datos del usuario:', usuarioError);\n                throw usuarioError;\n            }\n            return {\n                id: user.id,\n                email: user.email,\n                nombre: usuarioData.nombre,\n                rol: usuarioData.rol\n            };\n        } catch (error) {\n            console.error('Error al obtener usuario actual:', error);\n            throw error;\n        }\n    },\n    async logout () {\n        try {\n            const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.signOut();\n            if (error) throw error;\n        } catch (error) {\n            console.error('Error al cerrar sesión:', error);\n            throw error;\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/services.ts\n"));

/***/ })

});